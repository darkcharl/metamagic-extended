local __util = require 'larian.util'

function MeleeSpellAttackCheck()
    return HasStringInSpellRoll('AttackType.MeleeSpellAttack') & (HasSpellFlag(SpellFlags.Spell) | NonSpellMetamagicAbilities())
end

function ConcentrationSpellCheck()
    return HasSpellFlag(SpellFlags.Concentration) & (HasSpellFlag(SpellFlags.Spell) | NonSpellMetamagicAbilities())
end

function DetachedSpellCheck()
    return SpellId('Projectile_RayOfEnfeeblement') 
    | SpellId('Projectile_WitchBolt') 
    | SpellId('Shout_Blur') 
    | SpellId('Shout_ExpeditiousRetreat') 
    | SpellId('Target_BestowCurse')
    | SpellId('Target_CrownOfMadness') 
    | SpellId('Target_CloudOfDaggers') 
    | SpellId('Target_DancingLights') 
    | SpellId('Target_Darkness') 
    | SpellId('Target_EnlargeReduce') 
    | SpellId('Target_Fly') 
    | SpellId('Target_FogCloud') 
    | SpellId('Target_GaseousForm') 
    | SpellId('Target_Haste') 
    | SpellId('Target_HideousLaughter') 
    | SpellId('Target_HoldPerson')
    | SpellId('Target_Invisibility')
    | SpellId('Target_MageHand')
    | SpellId('Target_Levitate')
    | SpellId('Target_ProtectionFromEnergy')
    | SpellId('Target_VampiricTouch')
    | SpellId('Zone_Fear') 
end

function EmpoweredSpellCheck()
    return HasSpellFlag(SpellFlags.Harmful) & (HasSpellFlag(SpellFlags.Spell) | NonSpellMetamagicAbilities())
end

function ExpandedSpellCheck()
    return (HasSpellFlag(SpellFlags.Spell) | NonSpellMetamagicAbilities())
    & (AreaRadiusGreaterThan(0)
        | SpellId('Zone_BurningHands')
        | SpellId('Zone_ColorSpray')
        | SpellId('Zone_Fear')
        | SpellId('Zone_GustOfWind')
        | SpellId('Zone_Thunderwave')
    )
end

function SeekingSpellCheck()
    return RangedSpellAttackCheck() | MeleeSpellAttackCheck()
end

function TransmutedSpellCheck()
    return SpellDamageTypeIs(DamageType.Acid) | SpellDamageTypeIs(DamageType.Cold) | SpellDamageTypeIs(DamageType.Fire) | SpellDamageTypeIs(DamageType.Poison) | SpellDamageTypeIs(DamageType.Lightning) | SpellDamageTypeIs(DamageType.Thunder)
end

function NonAcidSpellCheck()
    return TransmutedSpellCheck() & ~SpellDamageTypeIs(DamageType.Acid)
end

function NonColdSpellCheck()
    return TransmutedSpellCheck() & ~SpellDamageTypeIs(DamageType.Cold)
end

function NonFireSpellCheck()
    return TransmutedSpellCheck() & ~SpellDamageTypeIs(DamageType.Fire)
end

function NonLightningSpellCheck()
    return TransmutedSpellCheck() & ~SpellDamageTypeIs(DamageType.Lightning)
end

function NonThunderSpellCheck()
    return TransmutedSpellCheck() & ~SpellDamageTypeIs(DamageType.Thunder)
end

function IsSpellExpanded()
    return HasStatus('METAMAGIC_EXPANDED_SPELL', context.Source)
end

function IsSpellTransmutedAcid()
    return HasStatus('METAMAGIC_TRANSMUTED_ACID', context.Source)
end

function IsSpellTransmutedCold()
    return HasStatus('METAMAGIC_TRANSMUTED_COLD', context.Source)
end

function IsSpellTransmutedFire()
    return HasStatus('METAMAGIC_TRANSMUTED_FIRE', context.Source)
end

function IsSpellTransmutedPoison()
    return HasStatus('METAMAGIC_TRANSMUTED_POISON', context.Source)
end

function IsSpellTransmutedLightning()
    return HasStatus('METAMAGIC_TRANSMUTED_LIGHTNING', context.Source)
end

function IsSpellTransmutedThunder()
    return HasStatus('METAMAGIC_TRANSMUTED_THUNDER', context.Source)
end

function IsSpellTransmuted()
    return IsSpellTransmutedAcid() | IsSpellTransmutedCold() | IsSpellTransmutedFire() | IsSpellTransmutedPoison() | IsSpellTransmutedLightning() | IsSpellTransmutedThunder()
end

function IsDefaultSpellDamageType(default)
    return ConditionResult(default) & ~IsSpellTransmuted()
end

function Transmuted(element, default)
    default = default or false
    
    if (element == "Acid") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedAcid()
    elseif (element == "Cold") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedCold()
    elseif (element == "Fire") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedFire()
    elseif (element == "Poison") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedPoison()
    elseif (element == "Lightning") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedLightning()
    elseif (element == "Thunder") then
        return IsDefaultSpellDamageType(default) | IsSpellTransmutedThunder()
    end

    return false
end

function HasDetachedSpell()
    return HasStatus('METAMAGIC_DETACHED_SPELL', context.Source)
end

function HasTransmutedSpell()
    return HasStatus('METAMAGIC_TRANSMUTED_SPELL', context.Source) | IsSpellTransmuted()
end

function HasPotentCantrip()
    return HasPassive('PotentCantrip',context.Source)
end

function HasSpell(spell_id)
    spell_id = spell_id or ''
    return SpellId(spell_id)
end

function IsSpellAttack()
    result = context.HitDescription.AttackType == AttackType.RangedSpellAttack
    or context.HitDescription.AttackType == AttackType.MeleeSpellAttack
    return ConditionResult(result)
end